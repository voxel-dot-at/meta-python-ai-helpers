Index: git/onnxruntime/core/optimizer/selectors_actions/selector_action_transformer.cc
===================================================================
--- git.orig/onnxruntime/core/optimizer/selectors_actions/selector_action_transformer.cc
+++ git/onnxruntime/core/optimizer/selectors_actions/selector_action_transformer.cc
@@ -150,7 +150,7 @@ static Status MatchAndProcess(
       RuntimeOptimizationRecord::ProducedOpIdVector produced_op_ids{};
       produced_op_ids.reserve(action_saved_state.produced_node_op_schemas.size());
 
-      for (const auto op_schema : action_saved_state.produced_node_op_schemas) {
+      for (const gsl::not_null<const onnx::OpSchema*>& op_schema : action_saved_state.produced_node_op_schemas) {
         produced_op_ids.push_back(utils::MakeOpId(*op_schema));
         if (save_context->record_produced_node_op_schema) {
           status = save_context->record_produced_node_op_schema(*op_schema);
Index: git/onnxruntime/core/session/inference_session.cc
===================================================================
--- git.orig/onnxruntime/core/session/inference_session.cc
+++ git/onnxruntime/core/session/inference_session.cc
@@ -830,7 +830,7 @@ common::Status InferenceSession::SaveToO
   ORT_RETURN_IF_ERROR(kernel_type_str_resolver.RegisterGraphNodeOpSchemas(model_->MainGraph()));
   ORT_RETURN_IF_ERROR(standalone::RegisterCustomOpNodeSchemas(kernel_type_str_resolver, model_->MainGraph()));
 
-  for (const auto op_schema : saved_runtime_optimization_produced_node_op_schemas_) {
+  for (const gsl::not_null<const onnx::OpSchema*>& op_schema : saved_runtime_optimization_produced_node_op_schemas_) {
     ORT_RETURN_IF_ERROR(kernel_type_str_resolver.RegisterOpSchema(*op_schema));
   }
 
